// Enhanced Fasal Pathshala Application with AI Assistant and Voice Features

// Application Data with Punjabi Support
const appData = {
  crops: [
    {
      name: "Rice", 
      nameHi: "‡§ö‡§æ‡§µ‡§≤", 
      namePb: "‡®ö‡©å‡®≤", 
      season: "Kharif", 
      soil: "Clay", 
      yield: "3-4 tons/hectare", 
      profitMargin: "‚Çπ25,000", 
      confidence: 95
    },
    {
      name: "Wheat", 
      nameHi: "‡§ó‡•á‡§π‡•Ç‡§Ç", 
      namePb: "‡®ï‡®£‡®ï", 
      season: "Rabi", 
      soil: "Loam", 
      yield: "4-5 tons/hectare", 
      profitMargin: "‚Çπ30,000", 
      confidence: 92
    },
    {
      name: "Sugarcane", 
      nameHi: "‡§ó‡§®‡•ç‡§®‡§æ", 
      namePb: "‡®ó‡©∞‡®®‡®æ", 
      season: "Year-round", 
      soil: "Clay-Loam", 
      yield: "70-80 tons/hectare", 
      profitMargin: "‚Çπ80,000", 
      confidence: 88
    },
    {
      name: "Cotton", 
      nameHi: "‡§ï‡§™‡§æ‡§∏", 
      namePb: "‡®ï‡®™‡®æ‡®π", 
      season: "Kharif", 
      soil: "Black", 
      yield: "500-600 kg/hectare", 
      profitMargin: "‚Çπ45,000", 
      confidence: 85
    },
    {
      name: "Maize", 
      nameHi: "‡§Æ‡§ï‡•ç‡§ï‡§æ", 
      namePb: "‡®Æ‡©±‡®ï‡©Ä", 
      season: "Kharif/Rabi", 
      soil: "Sandy-Loam", 
      yield: "6-8 tons/hectare", 
      profitMargin: "‚Çπ35,000", 
      confidence: 90
    }
  ],
  
  liveMandiPrices: [
    {crop: "Rice", cropHi: "‡§ö‡§æ‡§µ‡§≤", cropPb: "‡®ö‡©å‡®≤", price: 1850, change: "+2.5%", trend: "up", market: "Delhi", lastUpdate: "2 mins ago", volume: "1200 tons"},
    {crop: "Wheat", cropHi: "‡§ó‡•á‡§π‡•Ç‡§Ç", cropPb: "‡®ï‡®£‡®ï", price: 2100, change: "+1.2%", trend: "up", market: "Punjab", lastUpdate: "1 min ago", volume: "2500 tons"},
    {crop: "Sugarcane", cropHi: "‡§ó‡§®‡•ç‡§®‡§æ", cropPb: "‡®ó‡©∞‡®®‡®æ", price: 350, change: "-0.8%", trend: "down", market: "UP", lastUpdate: "3 mins ago", volume: "800 tons"},
    {crop: "Cotton", cropHi: "‡§ï‡§™‡§æ‡§∏", cropPb: "‡®ï‡®™‡®æ‡®π", price: 5200, change: "+3.1%", trend: "up", market: "Gujarat", lastUpdate: "1 min ago", volume: "450 tons"},
    {crop: "Onion", cropHi: "‡§™‡•ç‡§Ø‡§æ‡§ú", cropPb: "‡®™‡®ø‡®Ü‡®ú‡®º", price: 1200, change: "-5.2%", trend: "down", market: "Maharashtra", lastUpdate: "4 mins ago", volume: "600 tons"}
  ],

  aiAssistant: {
    name: "Krishi Mitra",
    avatar: "ü§ñ",
    responses: {
      greeting: {
        en: "Hello farmer! How can I help you today?",
        hi: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§ï‡§ø‡§∏‡§æ‡§® ‡§≠‡§æ‡§à! ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
        pb: "‡®∏‡®§ ‡®∏‡©ç‡®∞‡©Ä ‡®Ö‡®ï‡®æ‡®≤ ‡®ï‡®ø‡®∏‡®æ‡®® ‡®ú‡©Ä! ‡®Ö‡©±‡®ú ‡®Æ‡©à‡®Ç ‡®§‡©Å‡®π‡®æ‡®°‡©Ä ‡®ï‡®ø‡®µ‡©á‡®Ç ‡®Æ‡®¶‡®¶ ‡®ï‡®∞ ‡®∏‡®ï‡®¶‡®æ ‡®π‡®æ‡®Ç?"
      },
      cropAdvice: {
        en: "Based on your soil and weather data, I recommend these crops for maximum profit.",
        hi: "‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§î‡§∞ ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞, ‡§Æ‡•à‡§Ç ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§≤‡§æ‡§≠ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§á‡§® ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§",
        pb: "‡®§‡©Å‡®π‡®æ‡®°‡©Ä ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®Ö‡®§‡©á ‡®Æ‡©å‡®∏‡®Æ ‡®¶‡©á ‡®Ü‡®ß‡®æ‡®∞ '‡®§‡©á, ‡®Æ‡©à‡®Ç ‡®µ‡©±‡®ß ‡®§‡©ã‡®Ç ‡®µ‡©±‡®ß ‡®´‡®æ‡®á‡®¶‡©á ‡®≤‡®à ‡®á‡®®‡©ç‡®π‡®æ‡®Ç ‡®´‡®∏‡®≤‡®æ‡®Ç ‡®¶‡©Ä ‡®∏‡®≤‡®æ‡®π ‡®¶‡®ø‡©∞‡®¶‡®æ ‡®π‡®æ‡®Ç‡•§"
      },
      weather: {
        en: "Today's weather is perfect for farming activities. Temperature is 28¬∞C with 65% humidity.",
        hi: "‡§Ü‡§ú ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•Ä ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ ‡§∏‡§π‡•Ä ‡§π‡•à‡•§ ‡§§‡§æ‡§™‡§Æ‡§æ‡§® 28¬∞C ‡§î‡§∞ 65% ‡§®‡§Æ‡•Ä ‡§π‡•à‡•§",
        pb: "‡®Ö‡©±‡®ú ‡®¶‡®æ ‡®Æ‡©å‡®∏‡®Æ ‡®ñ‡©á‡®§‡©Ä ‡®¶‡©Ä‡®Ü‡®Ç ‡®ó‡®§‡©Ä‡®µ‡®ø‡®ß‡©Ä‡®Ü‡®Ç ‡®≤‡®à ‡®¨‡®ø‡®≤‡®ï‡©Å‡®≤ ‡®∏‡®π‡©Ä ‡®π‡©à‡•§ ‡®§‡®æ‡®™‡®Æ‡®æ‡®® 28¬∞C ‡®Ö‡®§‡©á 65% ‡®®‡®Æ‡©Ä ‡®π‡©à‡•§"
      },
      prices: {
        en: "Current wheat price is ‚Çπ2100 per quintal, up by 1.2% from yesterday.",
        hi: "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ó‡•á‡§π‡•Ç‡§Ç ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§ ‚Çπ2100 ‡§™‡•ç‡§∞‡§§‡§ø ‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤ ‡§π‡•à, ‡§ú‡•ã ‡§ï‡§≤ ‡§∏‡•á 1.2% ‡§Ö‡§ß‡§ø‡§ï ‡§π‡•à‡•§",
        pb: "‡®Æ‡©å‡®ú‡©Ç‡®¶‡®æ ‡®ï‡®£‡®ï ‡®¶‡©Ä ‡®ï‡©Ä‡®Æ‡®§ ‚Çπ2100 ‡®™‡©ç‡®∞‡®§‡©Ä ‡®ï‡©Å‡®á‡©∞‡®ü‡®≤ ‡®π‡©à, ‡®ú‡©ã ‡®ï‡©±‡®≤‡©ç‡®π ‡®§‡©ã‡®Ç 1.2% ‡®µ‡©±‡®ß ‡®π‡©à‡•§"
      }
    }
  },

  voiceCommands: [
    {command: "Hey Krishi", action: "activateAssistant"},
    {command: "‡§Æ‡•å‡§∏‡§Æ ‡§¨‡§§‡§æ‡§ì", action: "showWeather"},
    {command: "‡®Æ‡©å‡®∏‡®Æ ‡®¶‡©±‡®∏‡©ã", action: "showWeather"},
    {command: "Weather update", action: "showWeather"},
    {command: "‡§Æ‡§Ç‡§°‡•Ä ‡§≠‡§æ‡§µ", action: "showPrices"},
    {command: "‡®Æ‡©∞‡®°‡©Ä ‡®¶‡©á ‡®≠‡®æ‡®Ö", action: "showPrices"},
    {command: "Market rates", action: "showPrices"},
    {command: "Crop suggestion", action: "showCropAdvisory"},
    {command: "‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ", action: "showCropAdvisory"},
    {command: "‡®´‡®∏‡®≤ ‡®∏‡©Å‡®ù‡®æ‡®Ö", action: "showCropAdvisory"}
  ],

  tutorials: [
    {
      title: "Modern Irrigation Techniques", 
      titleHi: "‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§§‡§ï‡§®‡•Ä‡§ï", 
      titlePb: "‡®Ü‡®ß‡©Å‡®®‡®ø‡®ï ‡®∏‡®ø‡©∞‡®ö‡®æ‡®à ‡®§‡®ï‡®®‡©Ä‡®ï",
      duration: "15 min", 
      views: 12500, 
      category: "crop",
      hasAudio: true
    },
    {
      title: "Organic Pest Control Methods", 
      titleHi: "‡§ú‡•à‡§µ‡§ø‡§ï ‡§ï‡•Ä‡§ü ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£ ‡§µ‡§ø‡§ß‡§ø‡§Ø‡§æ‡§Ç", 
      titlePb: "‡®ú‡©à‡®µ‡®ø‡®ï ‡®ï‡©Ä‡®ü ‡®®‡®ø‡®Ø‡©∞‡®§‡®∞‡®£ ‡®µ‡®ø‡®ß‡©Ä‡®Ü‡®Ç",
      duration: "20 min", 
      views: 8900, 
      category: "pest",
      hasAudio: true
    },
    {
      title: "Soil Testing at Home", 
      titleHi: "‡§ò‡§∞ ‡§™‡§∞ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£", 
      titlePb: "‡®ò‡®∞ ‡®µ‡®ø‡©±‡®ö ‡®Æ‡®ø‡©±‡®ü‡©Ä ‡®¶‡©Ä ‡®ú‡®æ‡®Ç‡®ö",
      duration: "12 min", 
      views: 15600, 
      category: "crop",
      hasAudio: true
    },
    {
      title: "Smart Irrigation Systems", 
      titleHi: "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä", 
      titlePb: "‡®∏‡®Æ‡®æ‡®∞‡®ü ‡®∏‡®ø‡©∞‡®ö‡®æ‡®à ‡®™‡©ç‡®∞‡®£‡®æ‡®≤‡©Ä",
      duration: "18 min", 
      views: 7800, 
      category: "irrigation",
      hasAudio: true
    }
  ],

  forumPosts: [
    {
      question: "Best time to plant tomatoes in Punjab?", 
      questionHi: "‡§™‡§Ç‡§ú‡§æ‡§¨ ‡§Æ‡•á‡§Ç ‡§ü‡§Æ‡§æ‡§ü‡§∞ ‡§≤‡§ó‡§æ‡§®‡•á ‡§ï‡§æ ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡§Æ‡§Ø?", 
      questionPb: "‡®™‡©∞‡®ú‡®æ‡®¨ ‡®µ‡®ø‡©±‡®ö ‡®ü‡®Æ‡®æ‡®ü‡®∞ ‡®≤‡®ó‡®æ‡®â‡®£ ‡®¶‡®æ ‡®∏‡®≠ ‡®§‡©ã‡®Ç ‡®µ‡®ß‡©Ä‡®Ü ‡®∏‡®Æ‡®æ‡®Ç?",
      answers: 5, 
      author: "Ramesh Kumar",
      hasVoice: true
    },
    {
      question: "How to control aphids naturally?", 
      questionHi: "‡§Æ‡§æ‡§π‡•Ç‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ï‡•à‡§∏‡•á ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç?", 
      questionPb: "‡®ï‡®ø‡©ú‡®ø‡®Ü‡®Ç ‡®®‡©Ç‡©∞ ‡®ï‡©Å‡®¶‡®∞‡®§‡©Ä ‡®§‡®∞‡©Ä‡®ï‡©á ‡®®‡®æ‡®≤ ‡®ï‡®ø‡®µ‡©á‡®Ç ‡®ï‡®æ‡®¨‡©Ç ‡®ï‡®∞‡®®‡®æ?",
      answers: 8, 
      author: "Priya Sharma",
      hasVoice: true
    },
    {
      question: "Irrigation schedule for wheat crop?", 
      questionHi: "‡§ó‡•á‡§π‡•Ç‡§Ç ‡§ï‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ?", 
      questionPb: "‡®ï‡®£‡®ï ‡®¶‡©Ä ‡®´‡®∏‡®≤ ‡®≤‡®à ‡®∏‡®ø‡©∞‡®ö‡®æ‡®à ‡®∏‡®Æ‡®æ‡®Ç-‡®∏‡®æ‡®∞‡®£‡©Ä?",
      answers: 3, 
      author: "Suresh Patel",
      hasVoice: false
    }
  ],

  weather: {
    current: {temp: 28, humidity: 65, condition: "Partly Cloudy", wind: "12km/h", visibility: "10km", sunrise: "6:24"},
    forecast: [
      {day: "Today", high: 30, low: 22, rain: 20, icon: "‚òÄÔ∏è"},
      {day: "Tomorrow", high: 32, low: 24, rain: 10, icon: "‚õÖ"},
      {day: "Day 3", high: 29, low: 21, rain: 60, icon: "üåßÔ∏è"},
      {day: "Day 4", high: 27, low: 20, rain: 80, icon: "‚õàÔ∏è"},
      {day: "Day 5", high: 31, low: 23, rain: 5, icon: "‚òÄÔ∏è"}
    ]
  }
};

// Application State Management
let currentLanguage = 'en';
let isLoggedIn = false;
let otpSent = false;
let isOffline = false;
let aiAssistantActive = false;
let voiceRecognitionActive = false;
let speechSynthesis = window.speechSynthesis;
let currentVoiceInput = null;
let priceUpdateInterval = null;
let fontSize = 'normal';
let highContrast = false;

// Language Management
const translations = {
  en: {
    'Send OTP': 'Send OTP',
    'Verify OTP': 'Verify OTP',
    'Login': 'Login',
    'Enter OTP': 'Enter OTP',
    'Enter your mobile number': 'Enter your mobile number',
    'Enter 4-digit OTP': 'Enter 4-digit OTP',
    'Search tutorials, courses...': 'Search tutorials, courses...',
    'Describe your question in detail...': 'Describe your question in detail...'
  },
  hi: {
    'Send OTP': 'OTP ‡§≠‡•á‡§ú‡•á‡§Ç',
    'Verify OTP': 'OTP ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç',
    'Login': '‡§≤‡•â‡§ó‡§ø‡§®',
    'Enter OTP': 'OTP ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç',
    'Enter your mobile number': '‡§Ö‡§™‡§®‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç',
    'Enter 4-digit OTP': '4-‡§Ö‡§Ç‡§ï‡•Ä‡§Ø OTP ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç',
    'Search tutorials, courses...': '‡§ü‡•ç‡§Ø‡•Ç‡§ü‡•ã‡§∞‡§ø‡§Ø‡§≤, ‡§ï‡•ã‡§∞‡•ç‡§∏ ‡§ñ‡•ã‡§ú‡•á‡§Ç...',
    'Describe your question in detail...': '‡§Ö‡§™‡§®‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡§æ ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡•á‡§Ç...'
  },
  pb: {
    'Send OTP': 'OTP ‡®≠‡©á‡®ú‡©ã',
    'Verify OTP': 'OTP ‡®™‡©ç‡®∞‡®Æ‡®æ‡®£‡®ø‡®§ ‡®ï‡®∞‡©ã',
    'Login': '‡®≤‡®æ‡®ó‡®ø‡®®',
    'Enter OTP': 'OTP ‡®¶‡®æ‡®ñ‡®≤ ‡®ï‡®∞‡©ã',
    'Enter your mobile number': '‡®Ü‡®™‡®£‡®æ ‡®Æ‡©ã‡®¨‡®æ‡®à‡®≤ ‡®®‡©∞‡®¨‡®∞ ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã',
    'Enter 4-digit OTP': '4-‡®Ö‡©∞‡®ï‡®æ‡®Ç ‡®¶‡®æ OTP ‡®¶‡®∞‡®ú ‡®ï‡®∞‡©ã',
    'Search tutorials, courses...': '‡®ü‡®ø‡®ä‡®ü‡©ã‡®∞‡®ø‡®Ö‡®≤, ‡®ï‡©ã‡®∞‡®∏ ‡®ñ‡©ã‡®ú‡©ã...',
    'Describe your question in detail...': '‡®Ü‡®™‡®£‡©á ‡®∏‡®µ‡®æ‡®≤ ‡®¶‡®æ ‡®µ‡®ø‡®∏‡®•‡®æ‡®∞ ‡®®‡®æ‡®≤ ‡®µ‡®∞‡®£‡®® ‡®ï‡®∞‡©ã...'
  }
};

// Global functions that need to be available immediately
window.setLanguage = function(lang) {
  currentLanguage = lang;
  
  // Update language button states
  document.querySelectorAll('.lang-btn').forEach(btn => {
    btn.classList.remove('active');
    if (btn.getAttribute('data-lang') === lang) {
      btn.classList.add('active');
    }
  });
  
  updateLanguageDisplay();
  updatePlaceholders();
  refreshDynamicContent();
  
  // Save preference
  localStorage.setItem('fasalLanguage', lang);
  
  // Speak language change confirmation if speech is available
  if (window.speechSynthesis) {
    speakText(getTranslatedText('Language changed', '‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡•Ä ‡§ó‡§à', '‡®≠‡®æ‡®∏‡®º‡®æ ‡®¨‡®¶‡®≤‡©Ä ‡®ó‡®à'), lang);
  }
};

window.handleLogin = function() {
  const mobileInput = document.getElementById('mobileInput');
  const otpInput = document.getElementById('otpInput');
  const loginBtn = document.getElementById('loginBtn');
  const otpGroup = document.getElementById('otpGroup');
  const biometricOption = document.getElementById('biometricOption');
  
  if (!otpSent) {
    const mobile = mobileInput.value.trim();
    if (mobile.length !== 10 || !/^\d+$/.test(mobile)) {
      showNotification(
        getTranslatedText(
          'Please enter a valid 10-digit mobile number',
          '‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§µ‡•à‡§ß 10-‡§Ö‡§Ç‡§ï‡•Ä‡§Ø ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç',
          '‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®á‡©±‡®ï ‡®µ‡©à‡®ß 10-‡®Ö‡©∞‡®ï‡®æ‡®Ç ‡®¶‡®æ ‡®Æ‡©ã‡®¨‡®æ‡®à‡®≤ ‡®®‡©∞‡®¨‡®∞ ‡®¶‡®æ‡®ñ‡®≤ ‡®ï‡®∞‡©ã'
        ),
        'error'
      );
      return;
    }
    
    // Show loading state
    const btnText = loginBtn.querySelector('.btn-text');
    const loadingSpinner = loginBtn.querySelector('.loading-spinner');
    
    if (btnText && loadingSpinner) {
      loginBtn.classList.add('btn-loading');
      btnText.style.opacity = '0';
      loadingSpinner.classList.remove('hidden');
    }
    
    setTimeout(() => {
      otpSent = true;
      otpGroup.style.display = 'block';
      if (biometricOption) biometricOption.style.display = 'block';
      
      if (btnText) {
        btnText.textContent = getTranslatedText('Verify OTP', 'OTP ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç', 'OTP ‡®™‡©ç‡®∞‡®Æ‡®æ‡®£‡®ø‡®§ ‡®ï‡®∞‡©ã');
      }
      mobileInput.disabled = true;
      
      // Remove loading state
      if (btnText && loadingSpinner) {
        loginBtn.classList.remove('btn-loading');
        btnText.style.opacity = '1';
        loadingSpinner.classList.add('hidden');
      }
      
      showNotification(
        getTranslatedText(
          'OTP sent to your mobile number: 1234',
          '‡§Ü‡§™‡§ï‡•á ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§™‡§∞ OTP ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ: 1234',
          '‡®§‡©Å‡®π‡®æ‡®°‡©á ‡®Æ‡©ã‡®¨‡®æ‡®à‡®≤ ‡®®‡©∞‡®¨‡®∞ \'‡®§‡©á OTP ‡®≠‡©á‡®ú‡®ø‡®Ü ‡®ó‡®ø‡®Ü: 1234'
        ),
        'success'
      );
      
      if (otpInput) otpInput.focus();
    }, 2000);
  } else {
    const otp = otpInput.value.trim();
    if (otp === '1234') {
      loginSuccess();
    } else {
      showNotification(
        getTranslatedText(
          'Invalid OTP. Please try 1234',
          '‡§ó‡§≤‡§§ OTP‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ 1234 ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç',
          '‡®ó‡®≤‡®§ OTP‡•§ ‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á 1234 ‡®¶‡®æ ‡®â‡®™‡®Ø‡©ã‡®ó ‡®ï‡®∞‡©ã'
        ),
        'error'
      );
    }
  }
};

window.authenticateBiometric = function() {
  showNotification(
    getTranslatedText(
      'Place your finger on the sensor...',
      '‡§∏‡•á‡§Ç‡§∏‡§∞ ‡§™‡§∞ ‡§Ö‡§™‡§®‡•Ä ‡§â‡§Ç‡§ó‡§≤‡•Ä ‡§∞‡§ñ‡•á‡§Ç...',
      '‡®∏‡©à‡®Ç‡®∏‡®∞ \'‡®§‡©á ‡®Ü‡®™‡®£‡©Ä ‡®â‡©∞‡®ó‡®≤ ‡®∞‡©±‡®ñ‡©ã...'
    ),
    'info'
  );
  
  // Simulate biometric authentication
  setTimeout(() => {
    if (Math.random() > 0.2) { // 80% success rate
      loginSuccess();
    } else {
      showNotification(
        getTranslatedText(
          'Biometric authentication failed. Please try OTP.',
          '‡§¨‡§æ‡§Ø‡•ã‡§Æ‡•á‡§ü‡•ç‡§∞‡§ø‡§ï ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£ ‡§µ‡§ø‡§´‡§≤‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ OTP ‡§Ü‡§ú‡§º‡§Æ‡§æ‡§è‡§Ç‡•§',
          '‡®¨‡®æ‡®á‡®ì‡®Æ‡©à‡®ü‡®∞‡®ø‡®ï ‡®™‡©ç‡®∞‡®Æ‡®æ‡®£‡®ø‡®ï‡®§‡®æ ‡®´‡©á‡®≤‡©ç‡®π‡•§ ‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á OTP ‡®¶‡©Ä ‡®ï‡©ã‡®∏‡®º‡®ø‡®∏‡®º ‡®ï‡®∞‡©ã‡•§'
        ),
        'error'
      );
    }
  }, 3000);
};

window.toggleAssistant = function() {
  aiAssistantActive = !aiAssistantActive;
  const aiPanel = document.getElementById('aiPanel');
  const voicePulse = document.getElementById('voicePulse');
  
  if (aiAssistantActive) {
    if (aiPanel) aiPanel.classList.remove('hidden');
    if (voicePulse) voicePulse.classList.add('active');
    addAIMessage(appData.aiAssistant.responses.greeting[currentLanguage]);
  } else {
    if (aiPanel) aiPanel.classList.add('hidden');
    if (voicePulse) voicePulse.classList.remove('active');
  }
};

window.closeAssistant = function() {
  aiAssistantActive = false;
  const aiPanel = document.getElementById('aiPanel');
  const voicePulse = document.getElementById('voicePulse');
  if (aiPanel) aiPanel.classList.add('hidden');
  if (voicePulse) voicePulse.classList.remove('active');
};

window.showScreen = function(screenId) {
  const screens = document.querySelectorAll('.screen');
  screens.forEach(screen => screen.classList.remove('active'));
  
  const targetScreen = document.getElementById(screenId);
  if (targetScreen) {
    targetScreen.classList.add('active');
  }
  
  updateNavigation(screenId);
  window.scrollTo(0, 0);
  
  // Load screen-specific content
  switch (screenId) {
    case 'mandiScreen':
      loadMandiPrices();
      break;
    case 'weatherScreen':
      loadWeatherForecast();
      break;
    case 'learningScreen':
      loadTutorials();
      break;
    case 'communityScreen':
      loadForumPosts();
      break;
  }
};

// Make more functions globally available
window.toggleHighContrast = toggleHighContrast;
window.increaseFontSize = increaseFontSize;
window.startVoiceCommand = startVoiceCommand;
window.showVoiceCommands = showVoiceCommands;
window.hideVoiceCommands = hideVoiceCommands;
window.startVoiceInput = startVoiceInput;
window.updatePH = updatePH;
window.getCropRecommendation = getCropRecommendation;
window.refreshPrices = refreshPrices;
window.showPriceAlerts = showPriceAlerts;
window.getVoiceWeather = getVoiceWeather;
window.startVoiceSearch = startVoiceSearch;
window.speakRecommendations = speakRecommendations;
window.speakAlert = speakAlert;
window.showCategory = showCategory;
window.playTutorial = playTutorial;
window.openPost = openPost;
window.startVoicePost = startVoicePost;
window.showExpertChat = showExpertChat;
window.showPostQuestion = showPostQuestion;
window.hidePostQuestion = hidePostQuestion;
window.showNotifications = showNotifications;
window.hideNotifications = hideNotifications;
window.quickWeatherUpdate = quickWeatherUpdate;
window.quickPriceCheck = quickPriceCheck;
window.showEmergencyContacts = showEmergencyContacts;
window.showDownloads = showDownloads;

// Initialize App
document.addEventListener('DOMContentLoaded', function() {
  initializeApp();
  startLivePriceUpdates();
  initializeVoiceRecognition();
  loadDynamicContent();
  setupEventListeners();
  
  // Simulate network status changes
  setInterval(() => {
    if (Math.random() > 0.95) {
      toggleOfflineMode();
    }
  }, 30000);
});

function initializeApp() {
  updateLanguageDisplay();
  updatePlaceholders();
  
  // Check saved preferences
  const savedLanguage = localStorage.getItem('fasalLanguage');
  const savedFontSize = localStorage.getItem('fasalFontSize');
  const savedContrast = localStorage.getItem('fasalHighContrast');
  
  if (savedLanguage) {
    currentLanguage = savedLanguage;
    setLanguage(currentLanguage);
  }
  
  if (savedFontSize) {
    fontSize = savedFontSize;
    applyFontSize();
  }
  
  if (savedContrast === 'true') {
    highContrast = true;
    document.body.classList.add('high-contrast');
  }
  
  // Check if user was previously logged in
  const savedLogin = localStorage.getItem('fasalPathshalaLogin');
  if (savedLogin) {
    isLoggedIn = true;
    showScreen('homeScreen');
    const bottomNav = document.getElementById('bottomNav');
    if (bottomNav) bottomNav.style.display = 'flex';
  }
}

function updateLanguageDisplay() {
  const elements = document.querySelectorAll('[data-en]');
  elements.forEach(element => {
    const key = `data-${currentLanguage}`;
    const text = element.getAttribute(key);
    if (text) {
      if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
        element.placeholder = text;
      } else {
        element.textContent = text;
      }
    }
  });
}

function updatePlaceholders() {
  const placeholderElements = [
    { id: 'mobileInput', key: 'Enter your mobile number' },
    { id: 'otpInput', key: 'Enter 4-digit OTP' },
    { id: 'learningSearch', key: 'Search tutorials, courses...' },
    { id: 'questionText', key: 'Describe your question in detail...' }
  ];
  
  placeholderElements.forEach(({id, key}) => {
    const element = document.getElementById(id);
    if (element && translations[currentLanguage] && translations[currentLanguage][key]) {
      element.placeholder = translations[currentLanguage][key];
    }
  });
}

// Accessibility Functions
function toggleHighContrast() {
  highContrast = !highContrast;
  document.body.classList.toggle('high-contrast', highContrast);
  localStorage.setItem('fasalHighContrast', highContrast);
  
  showNotification(
    getTranslatedText(
      highContrast ? 'High contrast enabled' : 'High contrast disabled',
      highContrast ? '‡§â‡§ö‡•ç‡§ö ‡§ï‡§Ç‡§ü‡•ç‡§∞‡§æ‡§∏‡•ç‡§ü ‡§∏‡§ï‡•ç‡§∑‡§Æ' : '‡§â‡§ö‡•ç‡§ö ‡§ï‡§Ç‡§ü‡•ç‡§∞‡§æ‡§∏‡•ç‡§ü ‡§Ö‡§ï‡•ç‡§∑‡§Æ',
      highContrast ? '‡®â‡©±‡®ö ‡®ï‡©∞‡®ü‡®∞‡®æ‡®∏‡®ü ‡®∏‡®Æ‡®∞‡©±‡®•' : '‡®â‡©±‡®ö ‡®ï‡©∞‡®ü‡®∞‡®æ‡®∏‡®ü ‡®Ö‡®∏‡®Æ‡®∞‡©±‡®•'
    ), 
    'info'
  );
}

function increaseFontSize() {
  const sizes = ['normal', 'large', 'extra-large'];
  const currentIndex = sizes.indexOf(fontSize);
  const nextIndex = (currentIndex + 1) % sizes.length;
  
  // Remove old class
  document.body.classList.remove(`font-${fontSize}`);
  
  fontSize = sizes[nextIndex];
  
  // Add new class
  if (fontSize !== 'normal') {
    document.body.classList.add(`font-${fontSize}`);
  }
  
  localStorage.setItem('fasalFontSize', fontSize);
  
  showNotification(
    getTranslatedText(
      `Font size: ${fontSize}`,
      `‡§´‡§º‡•â‡§®‡•ç‡§ü ‡§∏‡§æ‡§á‡§ú‡§º: ${fontSize}`,
      `‡®´‡®º‡®æ‡®Ç‡®ü ‡®∏‡®æ‡®à‡®ú‡®º: ${fontSize}`
    ), 
    'info'
  );
}

function applyFontSize() {
  if (fontSize !== 'normal') {
    document.body.classList.add(`font-${fontSize}`);
  }
}

function loginSuccess() {
  isLoggedIn = true;
  localStorage.setItem('fasalPathshalaLogin', 'true');
  showScreen('homeScreen');
  const bottomNav = document.getElementById('bottomNav');
  if (bottomNav) bottomNav.style.display = 'flex';
  
  setTimeout(() => {
    showNotification(
      getTranslatedText(
        'Welcome to Fasal Pathshala!',
        '‡§´‡§∏‡§≤ ‡§™‡§æ‡§†‡§∂‡§æ‡§≤‡§æ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!',
        '‡®´‡®∏‡®≤ ‡®™‡®æ‡®†‡®∏‡®º‡®æ‡®≤‡®æ ‡®µ‡®ø‡©±‡®ö ‡®§‡©Å‡®π‡®æ‡®°‡®æ ‡®∏‡®µ‡®æ‡®ó‡®§ ‡®π‡©à!'
      ),
      'success'
    );
    
    // Welcome voice message
    if (window.speechSynthesis) {
      speakText(appData.aiAssistant.responses.greeting[currentLanguage]);
    }
    
    // Show AI assistant briefly
    setTimeout(() => {
      toggleAssistant();
      setTimeout(closeAssistant, 3000);
    }, 1000);
  }, 500);
}

// Voice Recognition Functions
function initializeVoiceRecognition() {
  // Check for speech recognition support
  if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
    window.recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    if (window.recognition) {
      window.recognition.continuous = false;
      window.recognition.interimResults = false;
      
      window.recognition.onresult = function(event) {
        const command = event.results[0][0].transcript.toLowerCase().trim();
        handleVoiceCommand(command);
      };
      
      window.recognition.onerror = function(event) {
        console.error('Speech recognition error:', event.error);
        stopVoiceRecording();
      };
      
      window.recognition.onend = function() {
        stopVoiceRecording();
      };
    }
  }
  
  // Listen for "Hey Krishi" wake word simulation
  document.addEventListener('keydown', function(e) {
    if (e.ctrlKey && e.key === ' ') { // Ctrl+Space as wake word simulation
      e.preventDefault();
      if (!aiAssistantActive) {
        toggleAssistant();
      }
      startVoiceCommand();
    }
  });
}

function startVoiceCommand() {
  if (!window.recognition) {
    showVoiceCommands();
    return;
  }
  
  startVoiceRecording();
  
  try {
    window.recognition.lang = getVoiceLanguage(currentLanguage);
    window.recognition.start();
  } catch (e) {
    console.error('Error starting voice recognition:', e);
    stopVoiceRecording();
  }
}

function startVoiceRecording() {
  voiceRecognitionActive = true;
  const voiceBtn = document.getElementById('voiceBtn');
  const voicePulse = document.getElementById('voicePulse');
  
  if (voiceBtn) {
    voiceBtn.classList.add('listening');
    const speakSpan = voiceBtn.querySelector('span:last-child');
    if (speakSpan) {
      speakSpan.textContent = getTranslatedText('Listening...', '‡§∏‡•Å‡§® ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...', '‡®∏‡©Å‡®£ ‡®∞‡®π‡©á ‡®π‡®æ‡®Ç...');
    }
  }
  
  if (voicePulse) {
    voicePulse.classList.add('active');
  }
  
  // Auto-stop after 10 seconds
  setTimeout(() => {
    if (voiceRecognitionActive) {
      stopVoiceRecording();
    }
  }, 10000);
}

function stopVoiceRecording() {
  voiceRecognitionActive = false;
  const voiceBtn = document.getElementById('voiceBtn');
  const voicePulse = document.getElementById('voicePulse');
  
  if (voiceBtn) {
    voiceBtn.classList.remove('listening');
    const speakSpan = voiceBtn.querySelector('span:last-child');
    if (speakSpan) {
      speakSpan.textContent = getTranslatedText('Speak', '‡§¨‡•ã‡§≤‡•á‡§Ç', '‡®¨‡©ã‡®≤‡©ã');
    }
  }
  
  if (voicePulse) {
    voicePulse.classList.remove('active');
  }
}

function handleVoiceCommand(command) {
  console.log('Voice command received:', command);
  
  // Find matching command
  const matchedCommand = appData.voiceCommands.find(cmd => 
    command.includes(cmd.command.toLowerCase()) || 
    cmd.command.toLowerCase().includes(command)
  );
  
  if (matchedCommand) {
    executeVoiceAction(matchedCommand.action);
    addAIMessage(getContextualResponse(matchedCommand.action));
  } else {
    // Fallback responses
    const response = getTranslatedText(
      "I didn't understand that command. Try 'Hey Krishi' followed by 'weather', 'prices', or 'crop advice'.",
      "‡§Æ‡•Å‡§ù‡•á ‡§µ‡§π ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§à‡•§ '‡§π‡•á ‡§ï‡•É‡§∑‡§ø' ‡§ï‡•á ‡§¨‡§æ‡§¶ '‡§Æ‡•å‡§∏‡§Æ', '‡§≠‡§æ‡§µ' ‡§Ø‡§æ '‡§´‡§∏‡§≤ ‡§∏‡§≤‡§æ‡§π' ‡§ï‡§π‡•á‡§Ç‡•§",
      "‡®Æ‡©à‡®®‡©Ç‡©∞ ‡®á‡®π ‡®ï‡®Æ‡®æ‡®Ç‡®° ‡®∏‡®Æ‡®ù ‡®®‡®π‡©Ä‡®Ç ‡®Ü‡®à‡•§ '‡®π‡©á ‡®ï‡©ç‡®∞‡®ø‡®∏‡®º‡©Ä' ‡®¶‡©á ‡®¨‡®æ‡®Ö‡®¶ '‡®Æ‡©å‡®∏‡®Æ', '‡®∞‡©á‡®ü' ‡®ú‡®æ‡®Ç '‡®´‡®∏‡®≤ ‡®∏‡®≤‡®æ‡®π' ‡®ï‡®π‡©ã‡•§"
    );
    addAIMessage(response);
    if (window.speechSynthesis) {
      speakText(response);
    }
  }
}

function executeVoiceAction(action) {
  switch (action) {
    case 'activateAssistant':
      if (!aiAssistantActive) toggleAssistant();
      break;
    case 'showWeather':
      showScreen('weatherScreen');
      break;
    case 'showPrices':
      showScreen('mandiScreen');
      break;
    case 'showCropAdvisory':
      showScreen('cropAdvisoryScreen');
      break;
    default:
      break;
  }
}

function getContextualResponse(action) {
  const responses = appData.aiAssistant.responses;
  switch (action) {
    case 'showWeather':
      return responses.weather[currentLanguage];
    case 'showPrices':
      return responses.prices[currentLanguage];
    case 'showCropAdvisory':
      return responses.cropAdvice[currentLanguage];
    default:
      return responses.greeting[currentLanguage];
  }
}

function addAIMessage(message) {
  const messagesContainer = document.getElementById('aiMessages');
  if (!messagesContainer) return;
  
  const messageDiv = document.createElement('div');
  messageDiv.className = 'ai-message';
  messageDiv.textContent = message;
  
  messagesContainer.appendChild(messageDiv);
  messagesContainer.scrollTop = messagesContainer.scrollHeight;
  
  // Limit message history
  const messages = messagesContainer.querySelectorAll('.ai-message');
  if (messages.length > 5) {
    messages[0].remove();
  }
}

function startVoiceInput(type) {
  currentVoiceInput = type;
  
  if (!window.recognition) {
    showNotification(
      getTranslatedText(
        'Voice input not supported in this browser',
        '‡§á‡§∏ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§Æ‡•á‡§Ç ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§á‡§®‡§™‡•Å‡§ü ‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à',
        '‡®á‡®∏ ‡®¨‡©ç‡®∞‡®æ‡®ä‡®ú‡®º‡®∞ ‡®µ‡®ø‡©±‡®ö ‡®µ‡©å‡®á‡®∏ ‡®á‡©∞‡®™‡©Å‡©±‡®ü ‡®∏‡®Æ‡®∞‡®•‡®ø‡®§ ‡®®‡®π‡©Ä‡®Ç'
      ),
      'warning'
    );
    return;
  }
  
  startVoiceRecording();
  
  window.recognition.onresult = function(event) {
    const transcript = event.results[0][0].transcript;
    handleVoiceInput(type, transcript);
    stopVoiceRecording();
  };
  
  try {
    window.recognition.start();
  } catch (e) {
    stopVoiceRecording();
  }
}

function handleVoiceInput(type, text) {
  switch (type) {
    case 'mobile':
      const numbers = text.replace(/\D/g, '');
      if (numbers.length === 10) {
        const mobileInput = document.getElementById('mobileInput');
        if (mobileInput) mobileInput.value = numbers;
      }
      break;
    case 'otp':
      const otpNumbers = text.replace(/\D/g, '');
      if (otpNumbers.length <= 4) {
        const otpInput = document.getElementById('otpInput');
        if (otpInput) otpInput.value = otpNumbers;
      }
      break;
    case 'soil':
      const soilTypes = ['clay', 'sandy', 'loam', 'black'];
      const matchedSoil = soilTypes.find(type => text.toLowerCase().includes(type));
      if (matchedSoil) {
        const soilSelect = document.getElementById('soilType');
        if (soilSelect) soilSelect.value = matchedSoil;
      }
      break;
    case 'question':
      const questionTextarea = document.getElementById('questionText');
      if (questionTextarea) questionTextarea.value = text;
      break;
    default:
      break;
  }
}

// Text-to-Speech Functions
function speakText(text, lang = currentLanguage) {
  if (!window.speechSynthesis) return;
  
  // Cancel any ongoing speech
  window.speechSynthesis.cancel();
  
  const utterance = new SpeechSynthesisUtterance(text);
  utterance.lang = getVoiceLanguage(lang);
  utterance.rate = 0.9;
  utterance.pitch = 1;
  
  // Get appropriate voice
  const voices = window.speechSynthesis.getVoices();
  const voice = voices.find(v => v.lang.startsWith(getVoiceLanguage(lang).split('-')[0]));
  if (voice) {
    utterance.voice = voice;
  }
  
  window.speechSynthesis.speak(utterance);
}

function getVoiceLanguage(lang) {
  const langMap = {
    'en': 'en-US',
    'hi': 'hi-IN',
    'pb': 'pa-IN'
  };
  return langMap[lang] || 'en-US';
}

function speakRecommendations() {
  const recommendations = document.getElementById('cropRecommendations');
  if (recommendations) {
    const text = recommendations.textContent;
    speakText(text);
  }
}

function speakAlert(alertElement) {
  const title = alertElement.querySelector('.alert-title');
  const desc = alertElement.querySelector('.alert-desc');
  if (title && desc) {
    speakText(`${title.textContent}. ${desc.textContent}`);
  }
}

function getVoiceWeather() {
  const weatherResponse = appData.aiAssistant.responses.weather[currentLanguage];
  if (window.speechSynthesis) {
    speakText(weatherResponse);
  }
  addAIMessage(weatherResponse);
  if (!aiAssistantActive) toggleAssistant();
}

// Live Price Updates
function startLivePriceUpdates() {
  updatePriceTicker();
  updateMandiPrices();
  
  // Update prices every 30 seconds
  priceUpdateInterval = setInterval(() => {
    updatePriceTicker();
    updateMandiPrices();
  }, 30000);
}

function updatePriceTicker() {
  const tickerContent = document.querySelector('.ticker-content');
  if (!tickerContent) return;
  
  let tickerHTML = '';
  appData.liveMandiPrices.forEach(item => {
    const trendIcon = item.trend === 'up' ? 'üìà' : 'üìâ';
    const cropName = getCropName(item.crop);
    tickerHTML += `<span class="ticker-item">${cropName} ‚Çπ${item.price} ${trendIcon} ${item.change}</span>`;
  });
  
  tickerContent.innerHTML = tickerHTML;
}

function updateMandiPrices() {
  // Simulate price fluctuations
  appData.liveMandiPrices.forEach(item => {
    const fluctuation = (Math.random() - 0.5) * 0.1; // ¬±5% max change
    const newPrice = Math.round(item.price * (1 + fluctuation));
    const changePercent = ((newPrice - item.price) / item.price * 100).toFixed(1);
    
    item.price = newPrice;
    item.change = (changePercent >= 0 ? '+' : '') + changePercent + '%';
    item.trend = changePercent >= 0 ? 'up' : 'down';
    item.lastUpdate = Math.floor(Math.random() * 5) + 1 + ' min ago';
  });
  
  // Update UI if on prices screen
  if (document.querySelector('.screen.active')?.id === 'mandiScreen') {
    loadMandiPrices();
  }
  
  // Update last updated time
  const updateTime = document.querySelector('.update-time');
  if (updateTime) {
    updateTime.textContent = 'Just now';
  }
}

function refreshDynamicContent() {
  const activeScreen = document.querySelector('.screen.active');
  if (!activeScreen) return;
  
  switch (activeScreen.id) {
    case 'mandiScreen':
      loadMandiPrices();
      break;
    case 'weatherScreen':
      loadWeatherForecast();
      break;
    case 'learningScreen':
      loadTutorials();
      break;
    case 'communityScreen':
      loadForumPosts();
      break;
  }
}

function refreshPrices() {
  const refreshBtn = document.querySelector('.refresh-btn');
  if (refreshBtn) {
    refreshBtn.style.transform = 'rotate(360deg)';
    setTimeout(() => {
      refreshBtn.style.transform = '';
    }, 500);
  }
  
  updateMandiPrices();
  showNotification(
    getTranslatedText(
      'Prices updated successfully',
      '‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§è ‡§ó‡§è',
      '‡®ï‡©Ä‡®Æ‡®§‡®æ‡®Ç ‡®∏‡®´‡®≤‡®§‡®æ‡®™‡©Ç‡®∞‡®µ‡®ï ‡®Ö‡©±‡®™‡®°‡©á‡®ü ‡®ï‡©Ä‡®§‡©Ä‡®Ü‡®Ç ‡®ó‡®à‡®Ü‡®Ç'
    ),
    'success'
  );
}

function updateNavigation(activeScreen) {
  const navItems = document.querySelectorAll('.nav-item');
  navItems.forEach(item => item.classList.remove('active'));
  
  const screenNavMap = {
    'homeScreen': 0,
    'cropAdvisoryScreen': 1,
    'weatherScreen': 2,
    'mandiScreen': 3,
    'communityScreen': 4
  };
  
  const activeIndex = screenNavMap[activeScreen];
  if (activeIndex !== undefined && navItems[activeIndex]) {
    navItems[activeIndex].classList.add('active');
  }
}

// Dynamic Content Loading
function loadDynamicContent() {
  loadWeatherForecast();
  loadMandiPrices();
  loadTutorials();
  loadForumPosts();
}

function loadMandiPrices() {
  const priceList = document.getElementById('priceList');
  if (!priceList) return;
  
  let html = '';
  appData.liveMandiPrices.forEach(item => {
    const trendClass = item.trend === 'up' ? 'positive' : 'negative';
    const trendIcon = item.trend === 'up' ? 'üìà' : 'üìâ';
    const cropName = getCropName(item.crop);
    
    html += `
      <div class="price-item">
        <div class="price-info">
          <h4>${cropName}</h4>
          <div class="price-details">${item.market} ‚Ä¢ ${getTranslatedText('per quintal', '‡§™‡•ç‡§∞‡§§‡§ø ‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤', '‡®™‡©ç‡®∞‡®§‡©Ä ‡®ï‡©Å‡®á‡©∞‡®ü‡®≤')}</div>
          <div class="price-details">${getTranslatedText('Volume', '‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ', '‡®Æ‡®æ‡®§‡®∞‡®æ')}: ${item.volume}</div>
        </div>
        <div class="price-change">
          <div class="price-amount">‚Çπ${item.price.toLocaleString()}</div>
          <div class="price-trend ${trendClass}">
            ${trendIcon} ${item.change}
          </div>
          <div class="update-time">${item.lastUpdate}</div>
        </div>
      </div>
    `;
  });
  
  priceList.innerHTML = html;
}

function loadWeatherForecast() {
  const forecastList = document.getElementById('forecastList');
  if (!forecastList) return;
  
  let html = '';
  appData.weather.forecast.forEach(day => {
    html += `
      <div class="forecast-item">
        <div class="forecast-day">${day.day}</div>
        <div class="forecast-icon">${day.icon}</div>
        <div class="forecast-temps">
          <span class="temp-high">${day.high}¬∞</span>
          <span class="temp-low">${day.low}¬∞</span>
        </div>
        <div class="rain-chance">${day.rain}% ${getTranslatedText('rain', '‡§¨‡§æ‡§∞‡§ø‡§∂', '‡®¨‡®æ‡®∞‡®ø‡®∏‡®º')}</div>
      </div>
    `;
  });
  
  forecastList.innerHTML = html;
}

function loadTutorials() {
  const tutorialList = document.getElementById('tutorialList');
  if (!tutorialList) return;
  
  displayTutorials(appData.tutorials);
}

function displayTutorials(tutorials) {
  const tutorialList = document.getElementById('tutorialList');
  if (!tutorialList) return;
  
  let html = '';
  
  tutorials.forEach(tutorial => {
    const icon = tutorial.category === 'pest' ? 'üêõ' : 
                 tutorial.category === 'crop' ? 'üå±' : 
                 tutorial.category === 'irrigation' ? 'üíß' : 'üìö';
    
    const title = getTutorialTitle(tutorial);
    
    html += `
      <div class="tutorial-item" onclick="playTutorial('${tutorial.title}')">
        <div class="tutorial-thumbnail">${icon}</div>
        <div class="tutorial-content">
          <h4>${title}</h4>
          <div class="tutorial-meta">
            <span>‚è±Ô∏è ${tutorial.duration}</span>
            <span>üëÅÔ∏è ${tutorial.views.toLocaleString()}</span>
            ${tutorial.hasAudio ? '<span>üé§ ' + getTranslatedText('Audio', '‡§ë‡§°‡§ø‡§Ø‡•ã', '‡®Ü‡®°‡©Ä‡®ì') + '</span>' : ''}
          </div>
        </div>
      </div>
    `;
  });
  
  tutorialList.innerHTML = html;
}

function loadForumPosts() {
  const forumList = document.getElementById('forumList');
  if (!forumList) return;
  
  let html = '';
  appData.forumPosts.forEach(post => {
    const question = getPostQuestion(post);
    
    html += `
      <div class="forum-post" onclick="openPost('${post.question}')">
        <div class="post-header">
          <div>
            <div class="post-question">${question}</div>
            <div class="post-meta">
              <span>üë§ ${post.author}</span>
              <span>‚è∞ 2h ago</span>
              ${post.hasVoice ? '<span>üé§ ' + getTranslatedText('Voice', '‡§Ü‡§µ‡§æ‡§ú‡§º', '‡®Ü‡®µ‡®æ‡®ú‡®º') + '</span>' : ''}
            </div>
          </div>
          <div class="answer-count">${post.answers}</div>
        </div>
      </div>
    `;
  });
  
  forumList.innerHTML = html;
}

// Helper Functions for Multilingual Content
function getCropName(crop) {
  const cropData = appData.liveMandiPrices.find(p => p.crop === crop);
  if (!cropData) return crop;
  
  switch (currentLanguage) {
    case 'hi': return cropData.cropHi || crop;
    case 'pb': return cropData.cropPb || crop;
    default: return crop;
  }
}

function getTutorialTitle(tutorial) {
  switch (currentLanguage) {
    case 'hi': return tutorial.titleHi || tutorial.title;
    case 'pb': return tutorial.titlePb || tutorial.title;
    default: return tutorial.title;
  }
}

function getPostQuestion(post) {
  switch (currentLanguage) {
    case 'hi': return post.questionHi || post.question;
    case 'pb': return post.questionPb || post.question;
    default: return post.question;
  }
}

function getTranslatedText(en, hi, pb) {
  switch (currentLanguage) {
    case 'hi': return hi;
    case 'pb': return pb;
    default: return en;
  }
}

// Crop Advisory Functions
function updatePH(value) {
  const phValueElement = document.getElementById('phValue');
  if (phValueElement) {
    phValueElement.textContent = parseFloat(value).toFixed(1);
  }
}

function getCropRecommendation() {
  const soilType = document.getElementById('soilType')?.value;
  const phValue = document.getElementById('phSlider')?.value;
  const state = document.getElementById('stateSelect')?.value;
  const farmArea = document.getElementById('farmArea')?.value;
  
  if (!soilType || !state) {
    showNotification(
      getTranslatedText(
        'Please fill all required fields',
        '‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§≠‡§∞‡•á‡§Ç',
        '‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®∏‡®æ‡®∞‡©á ‡®≤‡©ã‡©ú‡©Ä‡®Ç‡®¶‡©á ‡®ñ‡©á‡®§‡®∞ ‡®≠‡®∞‡©ã'
      ),
      'warning'
    );
    return;
  }
  
  const resultsDiv = document.getElementById('cropResults');
  const recommendationsDiv = document.getElementById('cropRecommendations');
  const btn = document.querySelector('.btn-large.enhanced');
  
  // Show loading state
  if (btn) {
    btn.classList.add('btn-loading');
    const btnText = btn.querySelector('.btn-text');
    const btnLoading = btn.querySelector('.btn-loading');
    if (btnText) btnText.style.opacity = '0';
    if (btnLoading) btnLoading.classList.remove('hidden');
  }
  
  if (resultsDiv) resultsDiv.style.display = 'block';
  if (recommendationsDiv) {
    recommendationsDiv.innerHTML = '<div class="loading" style="text-align: center; padding: 2rem;">ü§ñ AI is analyzing your data...</div>';
  }
  
  // Simulate AI processing
  setTimeout(() => {
    const recommendations = getCropRecommendations(soilType, phValue, state, farmArea);
    displayCropRecommendations(recommendations);
    
    // Remove loading state
    if (btn) {
      btn.classList.remove('btn-loading');
      const btnText = btn.querySelector('.btn-text');
      const btnLoading = btn.querySelector('.btn-loading');
      if (btnText) btnText.style.opacity = '1';
      if (btnLoading) btnLoading.classList.add('hidden');
    }
    
    // Speak recommendations
    const aiResponse = appData.aiAssistant.responses.cropAdvice[currentLanguage];
    addAIMessage(aiResponse);
    if (window.speechSynthesis) {
      speakText(aiResponse);
    }
    
  }, 3000);
}

function getCropRecommendations(soilType, phValue, state, farmArea) {
  // AI-like recommendation logic
  const suitableCrops = appData.crops.filter(crop => {
    const cropSoil = crop.soil.toLowerCase();
    const selectedSoil = soilType.toLowerCase();
    return cropSoil.includes(selectedSoil) || selectedSoil.includes(cropSoil.split('-')[0]);
  });
  
  // pH recommendations
  const ph = parseFloat(phValue || 7);
  const phRecommendations = [];
  if (ph < 6.5) {
    phRecommendations.push(getTranslatedText('Apply lime to reduce acidity', '‡§Ö‡§Æ‡•ç‡§≤‡§§‡§æ ‡§ï‡§Æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ö‡•Ç‡§®‡§æ ‡§°‡§æ‡§≤‡•á‡§Ç', '‡®§‡©á‡®ú‡®º‡®æ‡®¨‡©Ä‡®§‡®æ ‡®ò‡®ü‡®æ‡®â‡®£ ‡®≤‡®à ‡®ö‡©Ç‡®®‡®æ ‡®™‡®æ‡®ì'));
  } else if (ph > 7.5) {
    phRecommendations.push(getTranslatedText('Apply sulfur to reduce alkalinity', '‡§ï‡•ç‡§∑‡§æ‡§∞‡•Ä‡§Ø‡§§‡§æ ‡§ï‡§Æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§≤‡•ç‡§´‡§∞ ‡§°‡§æ‡§≤‡•á‡§Ç', '‡®ñ‡®æ‡®∞‡©Ä‡®§‡®æ ‡®ò‡®ü‡®æ‡®â‡®£ ‡®≤‡®à ‡®∏‡®≤‡®´‡®∞ ‡®™‡®æ‡®ì'));
  }
  
  // Area-based recommendations
  const areaAdvice = farmArea ? getAreaBasedAdvice(parseFloat(farmArea)) : null;
  
  return {
    crops: suitableCrops.length > 0 ? suitableCrops.slice(0, 3) : [appData.crops[0]],
    phRecommendations: phRecommendations,
    areaAdvice: areaAdvice,
    confidence: Math.floor(Math.random() * 10) + 90 // 90-99%
  };
}

function getAreaBasedAdvice(area) {
  if (area < 1) {
    return getTranslatedText(
      'Small scale farming - Focus on high-value crops',
      '‡§õ‡•ã‡§ü‡•á ‡§™‡•à‡§Æ‡§æ‡§®‡•á ‡§ï‡•Ä ‡§ñ‡•á‡§§‡•Ä - ‡§â‡§ö‡•ç‡§ö ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§µ‡§æ‡§≤‡•Ä ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç',
      '‡®õ‡©ã‡®ü‡©á ‡®™‡©à‡®Æ‡®æ‡®®‡©á ‡®¶‡©Ä ‡®ñ‡©á‡®§‡©Ä - ‡®â‡©±‡®ö ‡®Æ‡©Å‡©±‡®≤ ‡®µ‡®æ‡®≤‡©Ä‡®Ü‡®Ç ‡®´‡®∏‡®≤‡®æ‡®Ç \'‡®§‡©á ‡®´‡©ã‡®ï‡®∏ ‡®ï‡®∞‡©ã'
    );
  } else if (area < 5) {
    return getTranslatedText(
      'Medium scale farming - Consider crop rotation',
      '‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§™‡•à‡§Æ‡§æ‡§®‡•á ‡§ï‡•Ä ‡§ñ‡•á‡§§‡•Ä - ‡§´‡§∏‡§≤ ‡§ö‡§ï‡•ç‡§∞ ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç',
      '‡®Æ‡©±‡®ß‡®Æ ‡®™‡©à‡®Æ‡®æ‡®®‡©á ‡®¶‡©Ä ‡®ñ‡©á‡®§‡©Ä - ‡®´‡®∏‡®≤ ‡®ö‡©±‡®ï‡®∞ ‡®¨‡®æ‡®∞‡©á ‡®∏‡©ã‡®ö‡©ã'
    );
  } else {
    return getTranslatedText(
      'Large scale farming - Mechanization recommended',
      '‡§¨‡§°‡§º‡•á ‡§™‡•à‡§Æ‡§æ‡§®‡•á ‡§ï‡•Ä ‡§ñ‡•á‡§§‡•Ä - ‡§Ø‡§Ç‡§§‡•ç‡§∞‡•Ä‡§ï‡§∞‡§£ ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂',
      '‡®µ‡©±‡®°‡©á ‡®™‡©à‡®Æ‡®æ‡®®‡©á ‡®¶‡©Ä ‡®ñ‡©á‡®§‡©Ä - ‡®Æ‡®∏‡®º‡©Ä‡®®‡©Ä‡®ï‡®∞‡®£ ‡®¶‡©Ä ‡®∏‡®ø‡®´‡®æ‡®∞‡®ø‡®∏‡®º'
    );
  }
}

function displayCropRecommendations(recommendations) {
  const recommendationsDiv = document.getElementById('cropRecommendations');
  if (!recommendationsDiv) return;
  
  let html = '';
  
  // Update confidence meter
  const confidenceFill = document.querySelector('.confidence-fill');
  const confidenceText = document.querySelector('.confidence-text');
  if (confidenceFill && confidenceText) {
    confidenceFill.style.width = recommendations.confidence + '%';
    confidenceText.textContent = getTranslatedText(
      `AI Confidence: ${recommendations.confidence}%`,
      `AI ‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø‡§§‡§æ: ${recommendations.confidence}%`,
      `AI ‡®≠‡®∞‡©ã‡®∏‡®æ: ${recommendations.confidence}%`
    );
  }
  
  // Crop recommendations
  recommendations.crops.forEach(crop => {
    const cropName = getCurrentLanguageCropName(crop);
    html += `
      <div class="crop-recommendation">
        <h4>${cropName}</h4>
        <div class="crop-details">
          <div class="crop-detail">
            <strong>${getTranslatedText('Season:', '‡§Æ‡•å‡§∏‡§Æ:', '‡®Æ‡©å‡®∏‡®Æ:')}</strong> ${crop.season}
          </div>
          <div class="crop-detail">
            <strong>${getTranslatedText('Expected Yield:', '‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§®:', '‡®â‡®Æ‡©Ä‡®¶ ‡®ï‡©Ä‡®§‡®æ ‡®â‡®§‡®™‡®æ‡®¶‡®®:')}</strong> ${crop.yield}
          </div>
          <div class="crop-detail">
            <strong>${getTranslatedText('Profit Potential:', '‡§≤‡§æ‡§≠ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ:', '‡®≤‡®æ‡®≠ ‡®¶‡©Ä ‡®∏‡©∞‡®≠‡®æ‡®µ‡®®‡®æ:')}</strong> ${crop.profitMargin}
          </div>
          <div class="crop-detail">
            <strong>${getTranslatedText('AI Confidence:', 'AI ‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø‡§§‡§æ:', 'AI ‡®≠‡®∞‡©ã‡®∏‡®æ:')}</strong> ${crop.confidence}%
          </div>
        </div>
      </div>
    `;
  });
  
  // pH recommendations
  if (recommendations.phRecommendations.length > 0) {
    html += `
      <div class="crop-recommendation">
        <h4>${getTranslatedText('Soil pH Recommendations', '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä pH ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç', '‡®Æ‡®ø‡©±‡®ü‡©Ä pH ‡®∏‡®ø‡®´‡®æ‡®∞‡®ø‡®∏‡®º‡®æ‡®Ç')}</h4>
        <div class="crop-details">
          ${recommendations.phRecommendations.map(rec => `<div class="crop-detail">‚Ä¢ ${rec}</div>`).join('')}
        </div>
      </div>
    `;
  }
  
  // Area-based advice
  if (recommendations.areaAdvice) {
    html += `
      <div class="crop-recommendation">
        <h4>${getTranslatedText('Farm Size Recommendations', '‡§ñ‡•á‡§§ ‡§ï‡•á ‡§Ü‡§ï‡§æ‡§∞ ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç', '‡®ñ‡©á‡®§ ‡®¶‡©á ‡®Ü‡®ï‡®æ‡®∞ ‡®¶‡©Ä‡®Ü‡®Ç ‡®∏‡®ø‡®´‡®æ‡®∞‡®ø‡®∏‡®º‡®æ‡®Ç')}</h4>
        <div class="crop-details">
          <div class="crop-detail">${recommendations.areaAdvice}</div>
        </div>
      </div>
    `;
  }
  
  recommendationsDiv.innerHTML = html;
}

function getCurrentLanguageCropName(crop) {
  switch (currentLanguage) {
    case 'hi': return crop.nameHi || crop.name;
    case 'pb': return crop.namePb || crop.name;
    default: return crop.name;
  }
}

// Event Listeners Setup
function setupEventListeners() {
  // Form input listeners
  document.addEventListener('input', function(e) {
    if (e.target.id === 'mobileInput') {
      e.target.value = e.target.value.replace(/\D/g, '').slice(0, 10);
    }
    
    if (e.target.id === 'otpInput') {
      e.target.value = e.target.value.replace(/\D/g, '').slice(0, 4);
      if (e.target.value.length === 4) {
        setTimeout(() => handleLogin(), 500);
      }
    }
    
    if (e.target.id === 'learningSearch') {
      const searchTerm = e.target.value.toLowerCase();
      const filteredTutorials = appData.tutorials.filter(tutorial =>
        tutorial.title.toLowerCase().includes(searchTerm) ||
        (tutorial.titleHi && tutorial.titleHi.toLowerCase().includes(searchTerm)) ||
        (tutorial.titlePb && tutorial.titlePb.toLowerCase().includes(searchTerm))
      );
      displayTutorials(filteredTutorials);
    }
  });
  
  // Category pill listeners
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('category-pill')) {
      const pills = document.querySelectorAll('.category-pill');
      pills.forEach(pill => pill.classList.remove('active'));
      e.target.classList.add('active');
      
      const category = e.target.getAttribute('data-category');
      if (category) {
        showCategory(category);
      }
    }
    
    if (e.target.classList.contains('tab-btn')) {
      const tabs = document.querySelectorAll('.tab-btn');
      tabs.forEach(tab => tab.classList.remove('active'));
      e.target.classList.add('active');
    }
  });
}

// Additional Functions
function showCategory(category) {
  const filteredTutorials = category === 'all' ? 
    appData.tutorials : 
    appData.tutorials.filter(tutorial => tutorial.category === category);
  
  displayTutorials(filteredTutorials);
}

function playTutorial(title) {
  showNotification(
    getTranslatedText(
      `Playing: ${title}`,
      `‡§ö‡§≤‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç: ${title}`,
      `‡®ö‡®≤‡®æ ‡®∞‡®π‡©á ‡®π‡®æ‡®Ç: ${title}`
    ),
    'info'
  );
  
  const tutorial = appData.tutorials.find(t => t.title === title);
  if (tutorial && tutorial.hasAudio && window.speechSynthesis) {
    speakText(
      getTranslatedText(
        `Starting tutorial: ${title}. This tutorial covers important farming techniques.`,
        `‡§ü‡•ç‡§Ø‡•Ç‡§ü‡•ã‡§∞‡§ø‡§Ø‡§≤ ‡§∂‡•Å‡§∞‡•Ç: ${title}‡•§ ‡§Ø‡§π ‡§ü‡•ç‡§Ø‡•Ç‡§ü‡•ã‡§∞‡§ø‡§Ø‡§≤ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡•É‡§∑‡§ø ‡§§‡§ï‡§®‡•Ä‡§ï‡•ã‡§Ç ‡§ï‡•ã ‡§ï‡§µ‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§`,
        `‡®ü‡®ø‡®ä‡®ü‡©ã‡®∞‡®ø‡®Ö‡®≤ ‡®∏‡®º‡©Å‡®∞‡©Ç: ${title}‡•§ ‡®á‡®π ‡®ü‡®ø‡®ä‡®ü‡©ã‡®∞‡®ø‡®Ö‡®≤ ‡®Æ‡®π‡©±‡®§‡®µ‡®™‡©Ç‡®∞‡®£ ‡®ñ‡©á‡®§‡©Ä ‡®§‡®ï‡®®‡©Ä‡®ï‡®æ‡®Ç ‡®®‡©Ç‡©∞ ‡®ï‡®µ‡®∞ ‡®ï‡®∞‡®¶‡®æ ‡®π‡©à‡•§`
      )
    );
  }
}

function openPost(question) {
  showNotification(
    getTranslatedText(
      `Opening: ${question}`,
      `‡§ñ‡•ã‡§≤ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç: ${question}`,
      `‡®ñ‡©ã‡®≤‡©ç‡®π ‡®∞‡®π‡©á ‡®π‡®æ‡®Ç: ${question}`
    ),
    'info'
  );
}

function startVoicePost() {
  if (!window.recognition) {
    showNotification(
      getTranslatedText(
        'Voice posting not supported in this browser',
        '‡§á‡§∏ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§Æ‡•á‡§Ç ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§™‡•ã‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§∏‡§Æ‡§∞‡•ç‡§•‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à',
        '‡®á‡®∏ ‡®¨‡©ç‡®∞‡®æ‡®ä‡®ú‡®º‡®∞ ‡®µ‡®ø‡©±‡®ö ‡®µ‡©å‡®á‡®∏ ‡®™‡©ã‡®∏‡®ü‡®ø‡©∞‡®ó ‡®∏‡®Æ‡®∞‡®•‡®ø‡®§ ‡®®‡®π‡©Ä‡®Ç'
      ),
      'warning'
    );
    return;
  }
  
  showNotification(
    getTranslatedText(
      'Speak your question...',
      '‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§¨‡•ã‡§≤‡•á‡§Ç...',
      '‡®Ü‡®™‡®£‡®æ ‡®∏‡®µ‡®æ‡®≤ ‡®¨‡©ã‡®≤‡©ã...'
    ),
    'info'
  );
  
  startVoiceRecording();
  
  window.recognition.onresult = function(event) {
    const question = event.results[0][0].transcript;
    
    // Add to forum posts
    appData.forumPosts.unshift({
      question: question,
      questionHi: question,
      questionPb: question,
      answers: 0,
      author: "You",
      hasVoice: true
    });
    
    loadForumPosts();
    stopVoiceRecording();
    
    showNotification(
      getTranslatedText(
        'Voice question posted successfully!',
        '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§™‡•ã‡§∏‡•ç‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ!',
        '‡®µ‡©å‡®á‡®∏ ‡®∏‡®µ‡®æ‡®≤ ‡®∏‡®´‡®≤‡®§‡®æ‡®™‡©Ç‡®∞‡®µ‡®ï ‡®™‡©ã‡®∏‡®ü ‡®ï‡©Ä‡®§‡®æ ‡®ó‡®ø‡®Ü!'
      ),
      'success'
    );
  };
  
  try {
    window.recognition.start();
  } catch (e) {
    stopVoiceRecording();
  }
}

function showExpertChat() {
  showNotification(
    getTranslatedText(
      'Connecting to expert...',
      '‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡•á ‡§ú‡•Å‡§°‡§º ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...',
      '‡®Æ‡®æ‡®π‡®∞ ‡®®‡®æ‡®≤ ‡®ú‡©Å‡©ú ‡®∞‡®π‡©á ‡®π‡®æ‡®Ç...'
    ),
    'info'
  );
}

function startVoiceSearch(context = '') {
  currentVoiceInput = 'search';
  startVoiceInput('search');
}

function showPostQuestion() {
  const modal = document.getElementById('questionModal');
  if (modal) modal.classList.remove('hidden');
}

function hidePostQuestion() {
  const modal = document.getElementById('questionModal');
  if (modal) modal.classList.add('hidden');
}

function showVoiceCommands() {
  const modal = document.getElementById('voiceCommandsModal');
  if (modal) modal.classList.remove('hidden');
}

function hideVoiceCommands() {
  const modal = document.getElementById('voiceCommandsModal');
  if (modal) modal.classList.add('hidden');
}

function showNotifications() {
  const panel = document.getElementById('notificationsPanel');
  if (panel) {
    panel.classList.toggle('hidden');
  }
}

function hideNotifications() {
  const panel = document.getElementById('notificationsPanel');
  if (panel) {
    panel.classList.add('hidden');
  }
}

function showPriceAlerts() {
  showNotification(
    getTranslatedText(
      'Price alerts feature coming soon!',
      '‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ ‡§ú‡§≤‡•ç‡§¶ ‡§Ü ‡§∞‡§π‡•Ä ‡§π‡•à!',
      '‡®ï‡©Ä‡®Æ‡®§ ‡®ö‡©á‡®§‡®æ‡®µ‡®®‡©Ä ‡®µ‡®ø‡®∏‡®º‡©á‡®∏‡®º‡®§‡®æ ‡®ú‡®≤‡®¶‡©Ä ‡®Ü ‡®∞‡®π‡©Ä ‡®π‡©à!'
    ),
    'info'
  );
}

function showDownloads() {
  showNotification(
    getTranslatedText(
      'Downloads feature coming soon!',
      '‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ ‡§ú‡§≤‡•ç‡§¶ ‡§Ü ‡§∞‡§π‡•Ä ‡§π‡•à!',
      '‡®°‡®æ‡®â‡®®‡®≤‡©ã‡®° ‡®µ‡®ø‡®∏‡®º‡©á‡®∏‡®º‡®§‡®æ ‡®ú‡®≤‡®¶‡©Ä ‡®Ü ‡®∞‡®π‡©Ä ‡®π‡©à!'
    ),
    'info'
  );
}

function quickWeatherUpdate() {
  const weather = appData.weather.current;
  const message = getTranslatedText(
    `Current weather: ${weather.temp}¬∞C, ${weather.condition}. Humidity: ${weather.humidity}%`,
    `‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•å‡§∏‡§Æ: ${weather.temp}¬∞C, ${weather.condition}‡•§ ‡§®‡§Æ‡•Ä: ${weather.humidity}%`,
    `‡®Æ‡©å‡®ú‡©Ç‡®¶‡®æ ‡®Æ‡©å‡®∏‡®Æ: ${weather.temp}¬∞C, ${weather.condition}‡•§ ‡®®‡®Æ‡©Ä: ${weather.humidity}%`
  );
  
  addAIMessage(message);
  if (window.speechSynthesis) {
    speakText(message);
  }
  
  if (!aiAssistantActive) {
    toggleAssistant();
    setTimeout(closeAssistant, 5000);
  }
}

function quickPriceCheck() {
  const wheat = appData.liveMandiPrices.find(p => p.crop === 'Wheat');
  if (wheat) {
    const message = getTranslatedText(
      `Wheat price: ‚Çπ${wheat.price} per quintal, ${wheat.change} from yesterday`,
      `‡§ó‡•á‡§π‡•Ç‡§Ç ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§: ‚Çπ${wheat.price} ‡§™‡•ç‡§∞‡§§‡§ø ‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤, ‡§ï‡§≤ ‡§∏‡•á ${wheat.change}`,
      `‡®ï‡®£‡®ï ‡®¶‡©Ä ‡®ï‡©Ä‡®Æ‡®§: ‚Çπ${wheat.price} ‡®™‡©ç‡®∞‡®§‡©Ä ‡®ï‡©Å‡®á‡©∞‡®ü‡®≤, ‡®ï‡©±‡®≤‡©ç‡®π ‡®§‡©ã‡®Ç ${wheat.change}`
    );
    
    addAIMessage(message);
    if (window.speechSynthesis) {
      speakText(message);
    }
    
    if (!aiAssistantActive) {
      toggleAssistant();
      setTimeout(closeAssistant, 5000);
    }
  }
}

function showEmergencyContacts() {
  showNotification(
    getTranslatedText(
      'Emergency: Call 112 for immediate help. Agricultural helpline: 1800-180-1551',
      '‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤: ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è 112 ‡§™‡§∞ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§ï‡•É‡§∑‡§ø ‡§π‡•á‡§≤‡•ç‡§™‡§≤‡§æ‡§á‡§®: 1800-180-1551',
      '‡®ê‡®Æ‡®∞‡®ú‡©à‡®Ç‡®∏‡©Ä: ‡®§‡©Å‡®∞‡©∞‡®§ ‡®Æ‡®¶‡®¶ ‡®≤‡®à 112 \'‡®§‡©á ‡®ï‡®æ‡®≤ ‡®ï‡®∞‡©ã‡•§ ‡®ñ‡©á‡®§‡©Ä ‡®π‡©à‡®≤‡®™‡®≤‡®æ‡®à‡®®: 1800-180-1551'
    ),
    'warning'
  );
}

// Offline Mode
function toggleOfflineMode() {
  isOffline = !isOffline;
  const indicator = document.getElementById('connectionStatus');
  
  if (indicator) {
    const statusDot = indicator.querySelector('.status-dot');
    const statusText = indicator.querySelector('.status-text');
    
    if (isOffline) {
      if (statusDot) statusDot.classList.remove('online');
      if (statusText) statusText.textContent = getTranslatedText('Offline', '‡§ë‡§´‡§º‡§≤‡§æ‡§á‡§®', '‡®Ü‡®´‡®≤‡®æ‡®à‡®®');
      showNotification(
        getTranslatedText(
          'You are now offline. Some features may not work.',
          '‡§Ü‡§™ ‡§Ö‡§¨ ‡§ë‡§´‡§º‡§≤‡§æ‡§á‡§® ‡§π‡•à‡§Ç‡•§ ‡§ï‡•Å‡§õ ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Ç ‡§ï‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•Ä‡§Ç‡•§',
          '‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®π‡©Å‡®£ ‡®Ü‡®´‡®≤‡®æ‡®à‡®® ‡®π‡©ã‡•§ ‡®ï‡©Å‡®ù ‡®µ‡®ø‡®∏‡®º‡©á‡®∏‡®º‡®§‡®æ‡®µ‡®æ‡®Ç ‡®ï‡©∞‡®Æ ‡®®‡®π‡©Ä‡®Ç ‡®ï‡®∞ ‡®∏‡®ï‡®¶‡©Ä‡®Ü‡®Ç‡•§'
        ),
        'warning'
      );
    } else {
      if (statusDot) statusDot.classList.add('online');
      if (statusText) statusText.textContent = getTranslatedText('Online', '‡§ë‡§®‡§≤‡§æ‡§á‡§®', '‡®Ü‡®®‡®≤‡®æ‡®à‡®®');
      showNotification(
        getTranslatedText(
          'You are back online!',
          '‡§Ü‡§™ ‡§µ‡§æ‡§™‡§∏ ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§π‡•à‡§Ç!',
          '‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®µ‡®æ‡®™‡®∏ ‡®Ü‡®®‡®≤‡®æ‡®à‡®® ‡®π‡©ã!'
        ),
        'success'
      );
    }
  }
}

// Notification System
function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `notification ${type}`;
  notification.style.cssText = `
    position: fixed;
    top: 100px;
    right: 20px;
    left: 20px;
    max-width: 400px;
    margin: 0 auto;
    background: var(--color-bg-secondary);
    border: 2px solid var(--color-${type === 'success' ? 'success' : type === 'warning' ? 'warning' : type === 'error' ? 'error' : 'info'});
    border-radius: var(--border-radius);
    padding: 16px 20px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
    z-index: 4000;
    font-weight: 600;
    animation: slideDown 0.3s ease-out;
    backdrop-filter: blur(10px);
  `;
  
  const style = document.createElement('style');
  style.textContent = `
    @keyframes slideDown {
      from { opacity: 0; transform: translateY(-20px); }
      to { opacity: 1; transform: translateY(0); }
    }
  `;
  
  if (!document.head.querySelector('style[data-notifications]')) {
    style.setAttribute('data-notifications', 'true');
    document.head.appendChild(style);
  }
  
  notification.textContent = message;
  document.body.appendChild(notification);
  
  // Auto remove after 4 seconds
  setTimeout(() => {
    notification.style.animation = 'slideDown 0.3s ease-out reverse';
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 300);
  }, 4000);
}

// Cleanup function
window.addEventListener('beforeunload', function() {
  if (priceUpdateInterval) {
    clearInterval(priceUpdateInterval);
  }
  if (window.speechSynthesis) {
    window.speechSynthesis.cancel();
  }
});

// Export functions for testing
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    setLanguage,
    showScreen,
    getCropRecommendation,
    appData,
    toggleAssistant,
    handleVoiceCommand
  };
}